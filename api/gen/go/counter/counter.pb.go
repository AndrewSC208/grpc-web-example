// Code generated by protoc-gen-go. DO NOT EDIT.
// source: counter/counter.proto

package app_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Counter struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Counter) Reset()         { *m = Counter{} }
func (m *Counter) String() string { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()    {}
func (*Counter) Descriptor() ([]byte, []int) {
	return fileDescriptor_189c0686f57a5de6, []int{0}
}

func (m *Counter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counter.Unmarshal(m, b)
}
func (m *Counter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counter.Marshal(b, m, deterministic)
}
func (m *Counter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counter.Merge(m, src)
}
func (m *Counter) XXX_Size() int {
	return xxx_messageInfo_Counter.Size(m)
}
func (m *Counter) XXX_DiscardUnknown() {
	xxx_messageInfo_Counter.DiscardUnknown(m)
}

var xxx_messageInfo_Counter proto.InternalMessageInfo

func (m *Counter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Counter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Counter) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Counters struct {
	Counters             []*Counter `protobuf:"bytes,1,rep,name=counters,proto3" json:"counters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Counters) Reset()         { *m = Counters{} }
func (m *Counters) String() string { return proto.CompactTextString(m) }
func (*Counters) ProtoMessage()    {}
func (*Counters) Descriptor() ([]byte, []int) {
	return fileDescriptor_189c0686f57a5de6, []int{1}
}

func (m *Counters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counters.Unmarshal(m, b)
}
func (m *Counters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counters.Marshal(b, m, deterministic)
}
func (m *Counters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counters.Merge(m, src)
}
func (m *Counters) XXX_Size() int {
	return xxx_messageInfo_Counters.Size(m)
}
func (m *Counters) XXX_DiscardUnknown() {
	xxx_messageInfo_Counters.DiscardUnknown(m)
}

var xxx_messageInfo_Counters proto.InternalMessageInfo

func (m *Counters) GetCounters() []*Counter {
	if m != nil {
		return m.Counters
	}
	return nil
}

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_189c0686f57a5de6, []int{2}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Blank struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blank) Reset()         { *m = Blank{} }
func (m *Blank) String() string { return proto.CompactTextString(m) }
func (*Blank) ProtoMessage()    {}
func (*Blank) Descriptor() ([]byte, []int) {
	return fileDescriptor_189c0686f57a5de6, []int{3}
}

func (m *Blank) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blank.Unmarshal(m, b)
}
func (m *Blank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blank.Marshal(b, m, deterministic)
}
func (m *Blank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blank.Merge(m, src)
}
func (m *Blank) XXX_Size() int {
	return xxx_messageInfo_Blank.Size(m)
}
func (m *Blank) XXX_DiscardUnknown() {
	xxx_messageInfo_Blank.DiscardUnknown(m)
}

var xxx_messageInfo_Blank proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Counter)(nil), "app.v1.Counter")
	proto.RegisterType((*Counters)(nil), "app.v1.Counters")
	proto.RegisterType((*Id)(nil), "app.v1.Id")
	proto.RegisterType((*Blank)(nil), "app.v1.Blank")
}

func init() { proto.RegisterFile("counter/counter.proto", fileDescriptor_189c0686f57a5de6) }

var fileDescriptor_189c0686f57a5de6 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0x2d, 0xd2, 0x87, 0xd2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x89, 0x05,
	0x05, 0x7a, 0x65, 0x86, 0x4a, 0xce, 0x5c, 0xec, 0xce, 0x10, 0x09, 0x21, 0x3e, 0x2e, 0xa6, 0xcc,
	0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0xa6, 0xcc, 0x14, 0x21, 0x21, 0x2e, 0x96, 0xbc,
	0xc4, 0xdc, 0x54, 0x09, 0x26, 0xb0, 0x08, 0x98, 0x2d, 0x24, 0xc2, 0xc5, 0x0a, 0x36, 0x47, 0x82,
	0x59, 0x81, 0x51, 0x83, 0x39, 0x08, 0xc2, 0x51, 0x32, 0xe7, 0xe2, 0x80, 0x1a, 0x52, 0x2c, 0xa4,
	0xcd, 0xc5, 0x01, 0xb5, 0xa9, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x88, 0x5f, 0x0f, 0x62,
	0x97, 0x1e, 0x54, 0x4d, 0x10, 0x5c, 0x81, 0x92, 0x08, 0x17, 0x93, 0x67, 0x0a, 0xba, 0xc5, 0x4a,
	0xec, 0x5c, 0xac, 0x4e, 0x39, 0x89, 0x79, 0xd9, 0x46, 0xeb, 0x18, 0xb9, 0xf8, 0xa0, 0x9a, 0x82,
	0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x54, 0xb9, 0xd8, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52,
	0x85, 0xd0, 0x8d, 0x95, 0xe2, 0x82, 0x09, 0x78, 0xa6, 0x08, 0xa9, 0x73, 0xb1, 0x04, 0xa5, 0x26,
	0xa6, 0x08, 0xf1, 0xc2, 0xc4, 0xc0, 0x06, 0x4a, 0x09, 0xa0, 0xe9, 0x29, 0x06, 0x99, 0x17, 0x5a,
	0x90, 0x42, 0xd0, 0x3c, 0x55, 0x2e, 0x36, 0x97, 0xd4, 0x9c, 0x54, 0x02, 0xca, 0x92, 0xd8, 0xc0,
	0x81, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x66, 0xf6, 0x7b, 0x08, 0x75, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CounterServiceClient is the client API for CounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CounterServiceClient interface {
	Create(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*Id, error)
	Read(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*Counters, error)
	Update(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*Id, error)
	Delete(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*Id, error)
}

type counterServiceClient struct {
	cc *grpc.ClientConn
}

func NewCounterServiceClient(cc *grpc.ClientConn) CounterServiceClient {
	return &counterServiceClient{cc}
}

func (c *counterServiceClient) Create(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/app.v1.CounterService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) Read(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*Counters, error) {
	out := new(Counters)
	err := c.cc.Invoke(ctx, "/app.v1.CounterService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) Update(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/app.v1.CounterService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) Delete(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/app.v1.CounterService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServiceServer is the server API for CounterService service.
type CounterServiceServer interface {
	Create(context.Context, *Counter) (*Id, error)
	Read(context.Context, *Blank) (*Counters, error)
	Update(context.Context, *Counter) (*Id, error)
	Delete(context.Context, *Counter) (*Id, error)
}

// UnimplementedCounterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCounterServiceServer struct {
}

func (*UnimplementedCounterServiceServer) Create(ctx context.Context, req *Counter) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCounterServiceServer) Read(ctx context.Context, req *Blank) (*Counters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedCounterServiceServer) Update(ctx context.Context, req *Counter) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCounterServiceServer) Delete(ctx context.Context, req *Counter) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCounterServiceServer(s *grpc.Server, srv CounterServiceServer) {
	s.RegisterService(&_CounterService_serviceDesc, srv)
}

func _CounterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Counter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CounterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Create(ctx, req.(*Counter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CounterService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Read(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Counter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CounterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Update(ctx, req.(*Counter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Counter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CounterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Delete(ctx, req.(*Counter))
	}
	return interceptor(ctx, in, info, handler)
}

var _CounterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.v1.CounterService",
	HandlerType: (*CounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CounterService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _CounterService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CounterService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CounterService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter/counter.proto",
}
